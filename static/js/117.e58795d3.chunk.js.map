{"version":3,"file":"static/js/117.e58795d3.chunk.js","mappings":"uMAIMA,EAAe,SAACC,GAIpB,MADW,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,MAC/B,EAEMC,EAAW,CACf,KACA,QACA,0BACA,iCACA,qBACA,cACA,qBACA,gBACA,mBACA,OACA,UAqBIC,EAAY,SAAHC,GAAyB,IAAnBC,EAAWD,EAAXC,YAInBC,GAA0BC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9BI,EAAGF,EAAA,GAAEG,EAAUH,EAAA,GACtBI,GAAiCL,EAAAA,EAAAA,UAASL,EAASQ,IAAKG,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjDE,EAAOD,EAAA,GAAEE,EAAaF,EAAA,GAC7BG,GAA2BT,EAAAA,EAAAA,UAAS,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA/BE,EAAID,EAAA,GAAEE,EAAUF,EAAA,GACvBG,GAAgCb,EAAAA,EAAAA,WAAS,GAAKc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAvCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAuB5B,OAhDkB,SAACG,EAAUC,GAC7B,IAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,WACRF,EAAcG,QAAUL,CAC1B,GAAG,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,SAChB,GAAGJ,GACH,OAAO,kBAAMO,cAAcF,EAAI,CACjC,CACA,OAAO,WAAO,CAChB,GAAG,CAACL,GACN,CAWEQ,EAAY,WACV,IAAIC,EAASxB,EACTyB,EAAUjB,EACVA,EAXO,IAWQhB,EAASQ,GAAKT,SAC/BiC,GAAU,EACVC,EAAU,GAERD,IAAWhC,EAASD,OAClBI,GACFM,EAAW,GACXQ,EAAW,IAEXI,GAAY,IAGdR,EAAcb,EAASgC,GAAQE,MAAM,EAAGD,IACxCxB,EAAWuB,GACXf,EAAWgB,EAAU,GAEzB,GAAGb,EA1BW,GA0BQ,OAGpBe,EAAAA,EAAAA,KAAA,OACEC,UAAU,mBACVC,MAAOzC,EAAagB,GAAW,CAAC,EAAI,CAAE0B,MAAO,OAC7CC,aAAc,kBAAMlB,GAAY,EAAM,EACtCmB,aAAc,kBAAOhC,EAAMR,EAASD,QAAWsB,GAAY,EAAK,EAACoB,UAEjEC,EAAAA,EAAAA,MAAA,KAAGC,KAAM/C,EAAagB,GAAW,gCAAkC,GAAG6B,SAAA,EACpEN,EAAAA,EAAAA,KAAA,QAAAM,SAAO7B,IACM,4BAAZA,IAAyCuB,EAAAA,EAAAA,KAAA,QAAAM,SAAM,gCAIxD,EAEAxC,EAAU2C,aAAe,CACvBzC,aAAa,GAOf,Q,UCrEA,EApBgB,WAAH,OACXgC,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACHC,MAAM,UACNC,YAAY,mEAAkEN,UAE9EC,EAAAA,EAAAA,MAAA,WAASN,UAAU,OAAOR,GAAG,UAASa,SAAA,EACpCN,EAAAA,EAAAA,KAAA,UAAAM,UACEN,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOK,UACpBN,EAAAA,EAAAA,KAAA,MAAAM,UAAIN,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACC,GAAG,WAAUR,SAAC,mBAG5BC,EAAAA,EAAAA,MAAA,OAAKN,UAAU,WAAUK,SAAA,EACvBN,EAAAA,EAAAA,KAAA,KAAAM,SAAG,sDACHN,EAAAA,EAAAA,KAAClC,EAAS,QAEZkC,EAAAA,EAAAA,KAACe,EAAAA,EAAY,QAEV,C","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Validates the first half of an email address.\r\nconst validateText = (text) => {\r\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\r\n  // eslint-disable-next-line no-useless-escape\r\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\r\n  return re.test(text) || text.length === 0;\r\n};\r\n\r\nconst messages = [\r\n  'hi',\r\n  'hello',\r\n  'feel free to contact to',\r\n  'discuss Numerical computations',\r\n  'solver development',\r\n  'fluid flows',\r\n  'with a pinch of ML',\r\n  'to name a few',\r\n  'or just for some',\r\n  'help',\r\n  'thanks',\r\n];\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const id = setInterval(() => {\r\n        savedCallback.current();\r\n      }, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n    return () => {}; // pass linter\r\n  }, [delay]);\r\n};\r\n\r\nconst EmailLink = ({ loopMessage }) => {\r\n  const hold = 80; // ticks to wait after message is complete before rendering next message\r\n  const delay = 20; // tick length in mS\r\n\r\n  const [idx, updateIter] = useState(0); // points to current message\r\n  const [message, updateMessage] = useState(messages[idx]);\r\n  const [char, updateChar] = useState(0); // points to current char\r\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\r\n\r\n  useInterval(() => {\r\n    let newIdx = idx;\r\n    let newChar = char;\r\n    if (char - hold >= messages[idx].length) {\r\n      newIdx += 1;\r\n      newChar = 0;\r\n    }\r\n    if (newIdx === messages.length) {\r\n      if (loopMessage) {\r\n        updateIter(0);\r\n        updateChar(0);\r\n      } else {\r\n        setIsActive(false);\r\n      }\r\n    } else {\r\n      updateMessage(messages[newIdx].slice(0, newChar));\r\n      updateIter(newIdx);\r\n      updateChar(newChar + 1);\r\n    }\r\n  }, isActive ? delay : null);\r\n\r\n  return (\r\n    <div\r\n      className=\"inline-container\"\r\n      style={validateText(message) ? {} : { color: 'red' }}\r\n      onMouseEnter={() => setIsActive(false)}\r\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\r\n    >\r\n      <a href={validateText(message) ? 'mailto:@sidmish1801@gmail.com' : ''}>\r\n        <span>{message}</span>\r\n        {message === 'feel free to contact to' && <span> @sidmish1801@gmail.com</span>}\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nEmailLink.defaultProps = {\r\n  loopMessage: false,\r\n};\r\n\r\nEmailLink.propTypes = {\r\n  loopMessage: PropTypes.bool,\r\n};\r\n\r\nexport default EmailLink;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Main from '../layouts/Main';\r\nimport EmailLink from '../components/Contact/EmailLink';\r\nimport ContactIcons from '../components/Contact/ContactIcons';\r\n\r\nconst Contact = () => (\r\n  <Main\r\n    title=\"Contact\"\r\n    description=\"Contact Michael D'Angelo via email @ michael.l.dangelo@gmail.com\"\r\n  >\r\n    <article className=\"post\" id=\"contact\">\r\n      <header>\r\n        <div className=\"title\">\r\n          <h2><Link to=\"/contact\">Contact</Link></h2>\r\n        </div>\r\n      </header>\r\n      <div className=\"email-at\">\r\n        <p>Feel free to get in touch. You can email me at: </p>\r\n        <EmailLink />\r\n      </div>\r\n      <ContactIcons />\r\n    </article>\r\n  </Main>\r\n);\r\n\r\nexport default Contact;\r\n"],"names":["validateText","text","test","length","messages","EmailLink","_ref","loopMessage","_useState","useState","_useState2","_slicedToArray","idx","updateIter","_useState3","_useState4","message","updateMessage","_useState5","_useState6","char","updateChar","_useState7","_useState8","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","slice","_jsx","className","style","color","onMouseEnter","onMouseLeave","children","_jsxs","href","defaultProps","Main","title","description","Link","to","ContactIcons"],"sourceRoot":""}